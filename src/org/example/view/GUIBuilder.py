import os
import tkinter as tk
from tkinter import messagebox, ttk
from PIL import Image, ImageTk
from src.org.example.control.Control import Control
from src.org.example.model.ObjSaver import ObjSaver
from src.org.example.view.ListBoxManager import ListboxManager


# —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–±—Ç–æ –≤—ñ–∫–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–æ—é
class GUIBuilder:
    def __init__(self, root):
        self.tk_result_img = None
        self.root = root
        self.view = None
        self.control = Control(self)
        self.loaded_objects = []
        self.current_loaded_obj_index = 0

        self.root.title("–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä - ‚öΩüõπüèìüõºüéæ")
        self.root.geometry("550x950")

        self.notebook = ttk.Notebook(self.root)
        # –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –≤–≤–æ–¥—É –¥–∞–Ω–∏—Ö
        self.input_tab = tk.Frame(self.notebook)
        self.notebook.add(self.input_tab, text="–í–≤—ñ–¥ –¥–∞–Ω–∏—Ö")
        # –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –≤–∏–≤—ñ–¥—É –¥–∞–Ω–∏—Ö
        self.obj_tab = tk.Frame(self.notebook)
        self.notebook.add(self.obj_tab, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        self.notebook.pack(fill="both", expand=True)

        # –í–≤—ñ–¥ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ —É –≤—ñ–∫–Ω–æ
        # –Ω–∞–∑–≤–∞
        tk.Label(self.input_tab, text="–ù–∞–∑–≤–∞:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.name_entry = tk.Entry(self.input_tab, width=20)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)
        # —Ü—ñ–Ω–∞
        tk.Label(self.input_tab, text="–¶—ñ–Ω–∞ (–≥—Ä–Ω):").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.price_entry = tk.Entry(self.input_tab, width=10)
        self.price_entry.grid(row=1, column=1, padx=5, pady=5)
        # –≤–∞–≥–∞
        tk.Label(self.input_tab, text="–í–∞–≥–∞ (–∫–≥):").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.weight_entry = tk.Entry(self.input_tab, width=10)
        self.weight_entry.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(self.input_tab, text="–î—ñ–∞–º–µ—Ç—Ä (—Å–º):").grid(row=3, column=0, sticky="w", padx=5, pady=5)
        self.diameter_entry = tk.Entry(self.input_tab, width=10)
        self.diameter_entry.grid(row=3, column=1, padx=5, pady=5)

        tk.Label(self.input_tab, text="–¢–∏—Å–∫ (–∞—Ç–º):").grid(row=4, column=0, sticky="w", padx=5, pady=5)
        self.pressure_entry = tk.Entry(self.input_tab, width=10)
        self.pressure_entry.grid(row=4, column=1, padx=5, pady=5)

        # --- –í–∏—Ä–æ–±–Ω–∏–∫ (Listbox + scrollbar)
        tk.Label(self.input_tab, text="–í–∏—Ä–æ–±–Ω–∏–∫:").grid(row=5, column=0, sticky="w", padx=5, pady=5)
        self.manufacturer_listbox = tk.Listbox(self.input_tab, height=4, width=10, exportselection=False)
        self.manufacturer_scroll = tk.Scrollbar(self.input_tab, orient=tk.VERTICAL,
                                                command=self.manufacturer_listbox.yview)
        self.manufacturer_listbox.config(yscrollcommand=self.manufacturer_scroll.set)
        self.manufacturer_listbox.grid(row=5, column=1, padx=5, pady=5)
        self.manufacturer_scroll.grid(row=5, column=1, columnspan=2, sticky="ns", padx=0)
        self.manufacturers = ["Adidas", "Nike", "Puma"]
        for item in self.manufacturers:
            self.manufacturer_listbox.insert(tk.END, item)

        # --- –ú–∞—Ç–µ—Ä—ñ–∞–ª (OptionMenu)
        tk.Label(self.input_tab, text="–ú–∞—Ç–µ—Ä—ñ–∞–ª:").grid(row=6, column=0, sticky="w", padx=5, pady=5)
        self.materials = ("–®–∫—ñ—Ä–∞", "–ì—É–º–∞", "–°–∏–Ω—Ç–µ—Ç–∏–∫–∞")
        self.selected_material = tk.StringVar()
        self.selected_material.set(self.materials[0])
        tk.OptionMenu(self.input_tab, self.selected_material,
                      *self.materials).grid(row=6, column=1, padx=5, pady=5)

        # --- –†—ñ–∫ –≤–∏–ø—É—Å–∫—É (OptionMenu –∑ –∫–æ—Ä—Ç–µ–∂—É)
        tk.Label(self.input_tab, text="–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:").grid(row=7, column=0, sticky="w", padx=5, pady=5)
        self.years = ("2020", "2021", "2022", "2023", "2024")
        self.selected_year = tk.StringVar()
        self.selected_year.set(self.years[0])
        tk.OptionMenu(self.input_tab, self.selected_year,
                      *self.years).grid(row=7, column=1, padx=5, pady=5)

        # --- –ö—Ä–∞—ó–Ω–∞ (OptionMenu –∑ –∫–æ—Ä—Ç–µ–∂—É)
        tk.Label(self.input_tab, text="–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:").grid(row=8, column=0, sticky="w", padx=5, pady=5)
        self.countries = ("–£–∫—Ä–∞—ó–Ω–∞", "–°–®–ê", "–ö–∏—Ç–∞–π", "–ù—ñ–º–µ—á—á–∏–Ω–∞")
        self.selected_country = tk.StringVar()
        self.selected_country.set(self.countries[0])
        tk.OptionMenu(self.input_tab, self.selected_country,
                      *self.countries).grid(row=8, column=1, padx=5, pady=5)

        # –î–ª—è –≤–≤–æ–¥–∞ —ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤
        tk.Label(self.input_tab, text="–ù–æ–≤–∏–π –≤–∏—Ä–æ–±–Ω–∏–∫:").grid(row=9, column=0, sticky="w", padx=5, pady=5)
        self.new_manufacturer_entry = tk.Entry(self.input_tab)
        self.new_manufacturer_entry.grid(row=9, column=1, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º
        (tk.Button(self.input_tab, text="‚ûï –î–æ–¥–∞—Ç–∏",
                   command=lambda: ListboxManager.add_item(self.manufacturer_listbox,
                                                           self.new_manufacturer_entry)).grid(row=10, column=1, padx=5,
                                                                                              pady=2))
        tk.Button(self.input_tab, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                  command=lambda: ListboxManager.edit_item(self.manufacturer_listbox,
                                                           self.new_manufacturer_entry)).grid(row=11, column=0, padx=2,
                                                                                              columnspan=2, pady=2)
        tk.Button(self.input_tab, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                  command=lambda: ListboxManager.delete_item(self.manufacturer_listbox)).grid(row=12, column=0, padx=5,
                                                                                              columnspan=2, pady=2)
        tk.Button(self.input_tab, text="üîÉ –°–æ—Ä—Ç—É–≤–∞—Ç–∏",
                  command=lambda: ListboxManager.sort_items(self.manufacturer_listbox)).grid(row=11, column=1, padx=5,
                                                                                             columnspan=2, pady=2)
        tk.Button(self.input_tab, text="‚Ü©Ô∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫",
                  command=lambda: ListboxManager.reverse_items(self.manufacturer_listbox)).grid(row=12, column=1,
                                                                                                padx=1,
                                                                                                columnspan=2, pady=2)

        # –ì–∞–ª–µ—Ä–µ—è (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        self.image_display_label = tk.Label(self.input_tab)
        self.image_display_label.grid(row=13, column=0, columnspan=3, pady=10)

        # –∫–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç
        tk.Button(self.input_tab, text="‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç",
                  command=self.control.create_soccer_ball).grid(row=15, column=1, pady=2)

        # –ï–ª–µ–º–µ–Ω—Ç–∏ –≤–∫–ª–∞–¥–∫–∏ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        self.result_label = tk.Label(self.obj_tab, text="", font=("Arial", 12), justify=tk.CENTER)
        self.result_label.grid(row=0, column=0, columnspan=3, padx=5, pady=2, sticky="ew")

        self.result_image_label = tk.Label(self.obj_tab)
        self.result_image_label.grid(row=1, column=0, columnspan=3, padx=5, sticky="ew")


        prev_obj_button = ttk.Button(self.obj_tab, text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–±'—î–∫—Ç",
                                     command=self.show_previous_loaded_object)
        prev_obj_button.grid(row=2, column=0, padx=10, pady=5, sticky="w")

        next_obj_button = ttk.Button(self.obj_tab, text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –æ–±'—î–∫—Ç", command=self.show_next_loaded_object)
        next_obj_button.grid(row=2, column=2, padx=10, pady=5, sticky="e")

        delete_obj_button = ttk.Button(self.obj_tab, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç", command=self.delete_current_object,
                                       width=20)
        delete_obj_button.grid(row=3, column=0, columnspan=3, padx=10, sticky="ew")

        self.load_and_display_objs()

    def load_and_display_objs(self):
        self.loaded_objects = ObjSaver.load_all()
        if self.loaded_objects:
            self.show_loaded_object(0)  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –æ–±'—î–∫—Ç
        else:
            self.result_label.config(text="–©–µ –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞.")
            self.result_image_label.config(image='', text="")

    def show_loaded_object(self, index):
        if 0 <= index < len(self.loaded_objects):
            obj = self.loaded_objects[index]
            self.result_label.config(text=obj.getInfo())
            if obj.image_path:
                self.update_result_image(obj.image_path)
            else:
                self.result_image_label.config(image='', text="‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î")
            self.current_loaded_object_index = index

    def show_previous_loaded_object(self):
        if self.loaded_objects:
            self.current_loaded_object_index = (self.current_loaded_object_index - 1) % len(self.loaded_objects)
            self.show_loaded_object(self.current_loaded_object_index)

    def show_next_loaded_object(self):
        if self.loaded_objects:
            self.current_loaded_object_index = (self.current_loaded_object_index + 1) % len(self.loaded_objects)
            self.show_loaded_object(self.current_loaded_object_index)

    def delete_current_object(self):
        if self.loaded_objects:
            current_object = self.loaded_objects[self.current_loaded_object_index]
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç '{current_object.name}'?"):
                if ObjSaver.delete(current_object.name):
                    messagebox.showinfo("–£—Å–ø—ñ—à–Ω–æ", f"–û–±'—î–∫—Ç '{current_object.name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    self.load_and_display_objs()
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç '{current_object.name}'.")
        else:
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

    def update_result_image(self, image_path):
        try:
            # print("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:", image_path)
            # print("–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª:", os.path.exists(image_path))
            # print("–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())

            img = Image.open(image_path)
            img = img.resize((250, 150))
            self.tk_result_img = ImageTk.PhotoImage(img)

            self.result_image_label.config(image=self.tk_result_img, text="")
            self.result_image_label.image = self.tk_result_img
            print(f"[‚úÖ] –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {image_path}")
        except Exception as e:
            print(f"[‚ùå] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            self.result_image_label.config(image='', text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

    def set_gallery_view(self, view):
        self.view = view
        self.view.image_label = self.image_display_label
        # –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏
        tk.Button(self.input_tab, text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î",
                  command=self.view.prev_image).grid(row=14, column=0, padx=10)
        tk.Button(self.input_tab, text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ",
                  command=self.view.next_image).grid(row=14, column=2, padx=10)
